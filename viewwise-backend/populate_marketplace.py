import requests
import time

# Configuration de base
base_url = "http://localhost:8000"
login_url = f"{base_url}/auth/login/"
agents_url = f"{base_url}/api/agents/"
marketplace_url = f"{base_url}/api/marketplace/"

email = "sofiene.bouguerra.1996@gmail.com"     # Remplacer par ton vrai email
password = "00000000"            # Remplacer par ton vrai mot de passe
creator_id = 2
datasource_id = 1
modele_id = 1

categories = ["Commercialisation", "Entreprise", "√âducation", "G√©n√©ral", "Ventes", "Ing√©nierie", "L√©gal"]
tags_pool = [
    "Assistant, Automatisation", "R√©seaux sociaux, Facebook", "Twitter, Blog",
    "LinkedIn, Professionnel", "Analyse, Donn√©es", "CRM, Lead", "IA, Machine Learning"
]

# 1. Connexion pour r√©cup√©rer le token
login_data = {
    "email": email,
    "password": password
}

login_response = requests.post(login_url, json=login_data)

if login_response.status_code != 200:
    print(f"‚ùå Erreur de connexion : {login_response.text}")
    exit()

token = login_response.json()['access']

# 2. D√©finir les headers avec Authorization
headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {token}"
}

print("‚úÖ Connexion r√©ussie, token r√©cup√©r√©.")

# Liste pour stocker les IDs des agents cr√©√©s
created_agents_ids = []

# 3. Cr√©ation des agents
for i in range(1, 51):
    agent_data = {
        "agentName": f"Agent IA {i}",
        "agentRole": f"R√¥le Agent {i}",
        "agentObjective": f"Objectif principal de l'agent num√©ro {i} : aider les utilisateurs √† am√©liorer leur productivit√© gr√¢ce √† l'IA.",
        "agentInstructions": f"Instruisez l'agent {i} d'√™tre pr√©cis, amical et efficace.",
        "creator": creator_id,
        "etat": "draft",
        "datasource": datasource_id,
        "modele": modele_id
    }

    try:
        response = requests.post(agents_url, json=agent_data, headers=headers)
        if response.status_code == 201:
            agent_id = response.json().get('agentId') or response.json().get('id')
            if agent_id:
                created_agents_ids.append(agent_id)
                print(f"‚úÖ Agent {i} cr√©√© avec ID {agent_id}")
            else:
                print(f"‚ö†Ô∏è Agent {i} cr√©√© mais ID non trouv√© dans la r√©ponse")
        else:
            print(f"‚ùå Erreur lors de la cr√©ation de l'agent {i} : {response.text}")
        time.sleep(0.1)
    except Exception as e:
        print(f"‚ùå Exception lors de la cr√©ation de l'agent {i} : {str(e)}")

# 4. Ajout au marketplace
for idx, agent_id in enumerate(created_agents_ids, 1):
    marketplace_data = {
        "agent": agent_id,
        "category": categories[idx % len(categories)],
        "tags": tags_pool[idx % len(tags_pool)]
    }

    try:
        response = requests.post(marketplace_url, json=marketplace_data, headers=headers)
        if response.status_code == 201:
            print(f"‚úÖ Agent {agent_id} ajout√© au marketplace")
        else:
            print(f"‚ùå Erreur lors de l'ajout de l'agent {agent_id} au marketplace : {response.text}")
        time.sleep(0.1)
    except Exception as e:
        print(f"‚ùå Exception lors de l'ajout au marketplace pour agent {agent_id} : {str(e)}")

print("\nüéØ Script termin√©. 50 agents cr√©√©s et publi√©s sur le marketplace.")
